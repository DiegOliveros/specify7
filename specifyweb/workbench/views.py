import json

from django import http
from django.views.decorators.http import require_GET, require_POST
from django.views.decorators.csrf import csrf_exempt
from django.db import connection, transaction

from specifyweb.specify.api import toJson
from specifyweb.specify.views import login_maybe_required


@require_GET
@csrf_exempt
@login_maybe_required
def wb_rows(request, wb_id):
    """retrieves contents of workbench as a table. Currently the
    table-generating query is generated by another query.  This
    requires the mysql group_concat_max_len setting to be changed: eg:
    set global group_concat_max_len = 10000 It is probably a better
    idea, and not difficult, to build the wb-as-a-table query in
    python, some day.

    """

    sql = """select concat('select r.workbenchrowid,',
    group_concat('col',ViewOrder,'.celldata' ORDER BY ViewOrder), '
    from workbenchrow r ', group_concat(' left join workbenchdataitem
    col', ViewOrder, ' on col', ViewOrder,
    '.workbenchrowid=r.workbenchrowid and col', ViewOrder,
    '.WorkBenchTemplateMappingItemID=', WorkbenchTemplateMappingItemID
    ORDER BY ViewOrder SEPARATOR ' '), ' where r.workbenchid=',%s, '
    order by r.rownumber;') from workbenchtemplatemappingitem where
    workbenchtemplateid=%s group by workbenchtemplateid;"""

    cursor = connection.cursor()
    cursor.execute('set group_concat_max_len = 8921')  # see doc string above
    cursor.execute(sql, [wb_id, wb_id])
    generated_sql = cursor.fetchone()

    cursor.execute(unicode(generated_sql[0]))
    rows = cursor.fetchall()

    return http.HttpResponse(toJson(rows), content_type='application/json')


@require_POST
@csrf_exempt
@login_maybe_required
def update_wb(request):
    """Updates contents of wb. Post params are wbId and rowdata. Sample
    rowdata:
    [{"workbenchrowid":"426441","rownumber":10,"cells":[{"workbenchtemplatemappingitemid":9053,"celldata":"Neopouroverus"}]},{"workbenchrowid":"428041","rownumber":13,"cells":[{"workbenchtemplatemappingitemid":9049,"celldata":"Johnson"}]}]

    """
    from specifyweb.specify import models

    wb = models.Workbench.objects.get(pk=request.POST['wbId']);

    rowdata = json.loads(unicode(request.POST['rowdata']));
    #rowdata = request.POST['rowdata'];

    for row in rowdata:
        if row['workbenchrowid']:
            wbr = wb.workbenchrows.get(pk=row['workbenchrowid']);
        else:
            wbr = models.Workbenchrow()

        if row['rownumber']:
            wbr.rownumber = row['rownumber']

        for cell in row['cells']:
            try:
                wdi = wbr.workbenchdataitems.get(workbenchtemplatemappingitem=cell['workbenchtemplatemappingitemid'])
            except:
                wdi = models.Workbenchdataitem()
                wdi.workbenchtemplatemappingitem = models.Workbenchtemplatemappingitem.objects.get(pk=cell['workbenchtemplatemappingitemid'])
                wdi.workbenchrow = wbr

            wdi.rownumber = wbr.rownumber

            if cell['celldata']:
                wdi.celldata = cell['celldata']

            wdi.save()

        wbr.save()

    wb.save()

    return http.HttpResponse(toJson('check it and see'), content_type='application/json')
